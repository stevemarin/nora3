from nora3.common import MappingHolder, Singleton


class TokenType:
    value: str

    def __repr__(self):
        return f"{self.__class__.__name__}({self.value})"

    def __len__(self) -> int:
        return len(self.value)


class Character(Singleton, MappingHolder, TokenType):
    def __init_subclass__(cls, value: str) -> None:
        super().__init_subclass__(value, cls())
        cls.value = value

        def repr_func(_) -> str:
            return f"{cls.__name__}()"

        setattr(cls, "__repr__", repr_func)


# fmt: off
class LeftParen(Character, value="("): ...
class RightParen(Character, value=")"): ...
class LeftBrace(Character, value="{"): ...
class RightBrace(Character, value="}"): ...
class Semicolon(Character, value=";"): ...
class ForwardSlash(Character, value="/"): ...
class Hyphen(Character, value="-"): ...
class Tilde(Character, value="~"): ...
class Plus(Character, value="+"): ...
class Star(Character, value="*"): ...
class Percent(Character, value="%"): ...
class Less(Character, value="<"): ...
class Greater(Character, value=">"): ...
class LessLess(Character, value="<<"): ...
class GreaterGreater(Character, value=">>"): ...
class Ampersand(Character, value="&"): ...
class Bar(Character, value="|"): ...
class Caret(Character, value="^"): ...
class Pound(Character, value="#"): ...
class Equal(Character, value="="): ...
class EqualEqual(Character, value="=="): ...
class Bang(Character, value="!"): ...
class BangEqual(Character, value="!="): ...
class AmpersandAmpersand(Character, value="&&"): ...
class BarBar(Character, value="||"): ...
class LessEqual(Character, value="<="): ...
class GreaterEqual(Character, value=">="): ...
class PlusEqual(Character, value="+="): ...
class HyphenEqual(Character, value="-="): ...
class StarEqual(Character, value="*="): ...
class ForwardSlashEqual(Character, value="/="): ...
class PercentEqual(Character, value="%="): ...
class AmpersandEqual(Character, value="&="): ...
class BarEqual(Character, value="|="): ...
class CaretEqual(Character, value="^="): ...
class LessLessEqual(Character, value="<<="): ...
class GreaterGreaterEqual(Character, value=">>="): ...
class PlusPlus(Character, value="++"): ...
class HyphenHyphen(Character, value="--"): ...
class Question(Character, value="?"): ...
class Colon(Character, value=":"): ...
class Comma(Character, value=","): ...
# fmt: on


class Keyword(Singleton, MappingHolder, TokenType):
    def __init_subclass__(cls, value: str) -> None:
        super().__init_subclass__(value, cls())
        cls.value = value

        def repr_func(_) -> str:
            return f"{cls.__name__}()"

        setattr(cls, "__repr__", repr_func)


# fmt: off
class Void(Keyword, value="void"): ...
class Return(Keyword, value="return"): ...
class If(Keyword, value="if"): ...
class Else(Keyword, value="else"): ...
class Goto(Keyword, value="goto"): ...
class For(Keyword, value="for"): ...
class Do(Keyword, value="do"): ...
class While(Keyword, value="while"): ...
class Break(Keyword, value="break"): ...
class Continue(Keyword, value="continue"): ...
class Switch(Keyword, value="switch"): ...

class Specifier: ...
class TypeSpecifier(Specifier): ...
class StorageSpecifier(Specifier): ...

class Int(Keyword, TypeSpecifier, value="int"): ...
class Static(Keyword, StorageSpecifier, value="static"): ...
class Extern(Keyword, StorageSpecifier, value="extern"): ...
# fmt: on


class Identifier(TokenType):
    def __init__(self, value: str) -> None:
        self.value = value


class Literal(TokenType):
    def __init__(self, value: str) -> None:
        self.value = value


# fmt: off
class LiteralInt(Literal): ...
# fmt: on


class Token:
    def __init__(self, line: int, offset: int, tokentype: TokenType) -> None:
        self.line = line
        self.offset = offset
        self.tokentype = tokentype

    def __repr__(self) -> str:
        if self.line == self.offset == -1:
            return repr(self.tokentype)
        else:
            return f"{repr(self.tokentype)} @ {self.line}:{self.offset}"

    def __len__(self) -> int:
        return len(self.tokentype)


characters = {k[:1] for k in Character().mapping.keys()}
